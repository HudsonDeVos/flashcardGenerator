'''
    Title: flashcard_generator.py
    Author: Hudson DeVos
    Version: 0.2.5
    Purpose: To generate flashcards to help study
'''

# Disclaimer: This code was made with the HELP of ChatGPT.

# TODO: Import randint
from random import randint 
# TODO: Import tkinter for GUI
import tkinter as tk

# TODO: Crate a list 
term_list = [] 
definition_list = []

# TODO: Make a GUI

def add_flashcard(): # Created the add_flashcard function 
    term = term_entry.get() # Gets the term 
    definition = definition_entry.get() # Gets the definition 
    if term and definition: # Asks if both the term and definition are present 
        term_list.append(term) # Stores the term in a list
        definition_list.append(definition) # Stores the definition in a list 
        result_label.config(text=f"added {term} {definition}") # Shows the term and definition before deleting it  
        term_entry.delete(0, tk.END) # Deletes the users term from the menu
        definition_entry.delete(0, tk.END) # Deletes the users definition from the menu
    else:
        result_label.config(text="Please enter both a term and definition.") # Lets the user know if they did not put any term or definition


def show_term():

    # Clear previous buttons to prevent stacking
    for widget in study_frame.winfo_children():
        widget.destroy()

    # Tells if you have created flashcards to study
    if not term_list:
        result_label.config(text="No flashcards are created.")
        return

    # Allows the user to study their flaschards 
    index = randint(0, len(term_list) - 1) # Gets a term from the flashcard list
    tk.Label(study_frame, text=f"Term: {term_list[index]}", font=("Arial")).pack(pady=50) # Prints the chosen term to the screen
    
    # This creates a reaveal desinition button as well as shows the definition when the button is pressed 
    def show_definition(): 
        tk.Label(study_frame, text=f"Definition: {definition_list[index]}", font=("Arial", 14)).pack(pady=10)
        
        tk.Button(study_frame, text="Next Term", command=show_term).pack(pady=0)

    tk.Button(study_frame, text="Show definition", command=show_definition).pack(pady=10)
    
# Creates a welcome screen so the user does not open right into making a flashcard
def show_frame(frame):
    welcome_frame.pack_forget()
    add_frame.pack_forget()
    study_frame.pack_forget()
    frame.pack(fill="both", expand=True)

# Creates a button for switching to the add flashcard frame
def add_fc_button():
    show_frame(add_frame)

# Creates a button for switching to the welcome frame 
def welcome_button():
    show_frame(welcome_frame)

# Creates the GUI window
root = tk.Tk()
root.title("Flashcard Creator")
root.geometry("500x500")

'''Creating and working with frames and buttons:'''

# Creates a grid system for the welcome frame
welcome_frame = tk.Frame(root)
for r in range(10):
    welcome_frame.grid_rowconfigure(r, weight=1)
for c in range(10):
    welcome_frame.grid_columnconfigure(c, weight=1)

# Creates a frame for adding flashcards
add_frame = tk.Frame(root)

# Creates a frame for studying flashcards
study_frame = tk.Frame(root)
study_label = tk.Label(study_frame, text="", font=("Arial", 14))
study_label.grid(pady=50)

# Creates a label for the welcome frame
welcome_label = tk.Label(welcome_frame, text="Welcome to the Flashcard Generator", font=("Arial", 16))
welcome_label.grid(row=0, column=5, pady=0)

# Creates buttons for switching to the add flashcard frame
switch_to_add_fc = tk.Button(welcome_frame, text="Add Flashcards", command=add_fc_button)
switch_to_add_fc.grid(row=1, column=5, pady=0)

# Creates buttons for switching to the study frame
switch_to_study_fc = tk.Button(welcome_frame, text="Study Flashcards", command=lambda: [show_frame(study_frame), show_term()])
switch_to_study_fc.grid(row=2, column=5, pady=0)

# Creates a grid system for the add fc frame
for r in range(10):
    add_frame.grid_rowconfigure(r, weight=1)
for c in range(10):
    add_frame.grid_columnconfigure(c, weight=1)

# Creates label for entering a term
enter_term = tk.Label(add_frame, text="Enter Term:")
enter_term.grid(row=0, column=5, pady=0)

# Creates a box for inputing a term
term_entry = tk.Entry(add_frame,  width=30)
term_entry.grid(row=1, column=5, pady=0)

# Creates a label for entering a definition
enter_definition = tk.Label(add_frame, text="Enter Definition:")
enter_definition.grid(row=2, column=5, pady=0)

# Creates a box for inputing a definition
definition_entry = tk.Entry(add_frame, width=30) 
definition_entry.grid(row=3, column=5, pady=0)

# Creates a button for adding a flashcard
add_button = tk.Button(add_frame, text="Add Flashcard", command=add_flashcard)
add_button.grid(row=4, column=5, pady=0)

# Creates a label for showing results
result_label = tk.Label(add_frame, text="")
result_label.grid(row=5, column=5, pady=0)

# Creates buttons for switching to the welcome frame from the add fc frame
back_to_welcome_frame = tk.Button(add_frame, text="Back to Menu", command=welcome_button)
back_to_welcome_frame.grid(row=6, column=5, pady=0)

# Creates buttons for switching to the study frame
switch_to_study_fc = tk.Button(add_frame, text="Study Flashcards", command=lambda: [show_frame(study_frame), show_term()])
switch_to_study_fc.grid(row=7, column=5, pady=0)

'''Ends the creation and use of frames and buttons'''

# Creates a drop down menu
menu = tk.Menu(root)
root.config(menu=menu)

flashcard_menu = tk.Menu(menu, tearoff=0)
menu.add_cascade(label="Flashcards", menu=flashcard_menu)

file_menu = tk.Menu(menu, tearoff=0)
menu.add_cascade(label="File", menu=file_menu)
file_menu.add_command(label="Exit", command=root.quit)

flashcard_menu.add_command(label="Add New", command=lambda: show_frame(add_frame))
flashcard_menu.add_command(label="Study", command=lambda: [show_frame(study_frame), show_term()])

welcome_frame.pack(fill="both", expand=True)

root.mainloop()
           